module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Programinit: peg$parsePrograminit },
        peg$startRuleFunction  = peg$parsePrograminit,

        peg$c0 = function(main2) { return {type:'main',body:'empty'} },
        peg$c1 = function(main) {return {type:'main',body:main[5]} },
        peg$c2 = function(main) {return {type:'main',body:main[4]} },
        peg$c3 = function(a) { return a },
        peg$c4 = function(b) { return b },
        peg$c5 = peg$otherExpectation("EOF"),
        peg$c6 = peg$anyExpectation(),
        peg$c7 = peg$otherExpectation("test"),
        peg$c8 = function(a) {return makeLinearize(a);},
        peg$c9 = function(a) { return {type:'WhileStatement',expression:a[1],code:a[2]} },
        peg$c10 = function(a) { return {type:'DoWhileStatement',code:a[1],whileCmd:a[2], expression:a[3]} },
        peg$c11 = function(c, e) { return {type:'IfStatement',expression:makeLinearize(c[1]),code:c[2], elseCode:e} },
        peg$c12 = function(c) { return {type:'IfStatement',expression:makeLinearize(c[1]),code:c[2], elseCode:c[4]} },
        peg$c13 = function(c) { return {type:'IfStatement',expression:makeLinearize(c[1]),code:c[2], elseCode:"null"} },
        peg$c14 = function(a) {return {type:'ForStatement',expression:a[1],code:a[2] }},
        peg$c15 = function(f, s, t) {return {type:'ForExpressionTerms',fistTerm:f ,secondTerm:s, thirdTerm:t }},
        peg$c16 = function(a) {return {type:'PrintfStatement',body:a[1]}},
        peg$c17 = function(a) {return {type:'ReturnStatement',body:a[1]}},
        peg$c18 = function(a) {return {type:'BreakStatement'}},
        peg$c19 = function(a) {return {type:'ContinueStatement'}},
        peg$c20 = function(a) {return {type:'ScanfStatement',body:a[1]}},
        peg$c21 = function(varDec) { return {type:"VariableStatement", body:makeLinearize(varDec)}},
        peg$c22 = function(varAss) { return {type:"VariableStatement", body:makeLinearize(varAss)}},
        peg$c23 = function(varDec2, tail) { return {type:"VariableStatementList",body:makeLinearize(varDec2), tail:{type:'VariableStatementArrayAtribuition',body:makeLinearize(tail)}}},
        peg$c24 = function(varDec2, tail) { return {type:"VariableStatementList",body:makeLinearize(varDec2), tail:{type:'VariableStatementArray',body:makeLinearize(tail)}}},
        peg$c25 = function(varDec2, tail) { return {type:"VariableStatementList",body:makeLinearize(varDec2), tail:{type:'VariableStatementAtribuition',body:makeLinearize(tail)}}},
        peg$c26 = function(varDec2, tail) { return {type:"VariableStatementList",body:makeLinearize(varDec2), tail:{type:'VariableStatementSimple',body:makeLinearize(tail)}}},
        peg$c27 = function(a) { return {type:"VariableStatementAtribuition",body:makeLinearize(a)}},
        peg$c28 = function(a) { return {type:'VariableStatementSimple',body:a}},
        peg$c29 = function(a) { return {type:'VariableStatementArray',body:a}},
        peg$c30 = function(a) { return {type:'Equation',body:makeLinearize(serialize(a))} },
        peg$c31 = function(a) { return serialize(a) },
        peg$c32 = function(a) {return serialize(a)},
        peg$c33 = function(a) {return {type:'ExpressionStatement',body:makeLinearize(a)}},
        peg$c34 = function(a) {return {type:'ExpressionUnit',body:makeLinearize(a)}},
        peg$c35 = function(a) {return {type:'AssignmentExpression',body:makeLinearize(a)}},
        peg$c36 = peg$otherExpectation("Type"),
        peg$c37 = function(c) { return c },
        peg$c38 = function(a) {return a},
        peg$c39 = function(b) { return {type:"IDENTIFIER_POINTER_VARIABLE", body:clearArray(b)} },
        peg$c40 = peg$otherExpectation("Optional Whitespace"),
        peg$c41 = /^[\t\n\r]/,
        peg$c42 = peg$classExpectation(["\t", "\n", "\r"], false, false),
        peg$c43 = function(w) { return[w.join('')] },
        peg$c44 = peg$otherExpectation("Mandatory Whitespace"),
        peg$c45 = /^[\t\r\n]/,
        peg$c46 = peg$classExpectation(["\t", "\r", "\n"], false, false),
        peg$c47 = "\n",
        peg$c48 = peg$literalExpectation("\n", false),
        peg$c49 = "{",
        peg$c50 = peg$literalExpectation("{", false),
        peg$c51 = "\"",
        peg$c52 = peg$literalExpectation("\"", false),
        peg$c53 = "|",
        peg$c54 = peg$literalExpectation("|", false),
        peg$c55 = "}",
        peg$c56 = peg$literalExpectation("}", false),
        peg$c57 = function(v) {return [v[2].join(''),v[5].join(''),v[7].join('')]},
        peg$c58 = peg$otherExpectation("va"),
        peg$c59 = function(a) {return a[1]},
        peg$c60 = /^[0-9]/,
        peg$c61 = peg$classExpectation([["0", "9"]], false, false),
        peg$c62 = "INSTANCE_OF_INT",
        peg$c63 = peg$literalExpectation("INSTANCE_OF_INT", false),
        peg$c64 = function(v) { return {type:'INSTANCE_OF_INT',value:parseValueInput(v)} },
        peg$c65 = "INSTANCE_OF_FLOAT",
        peg$c66 = peg$literalExpectation("INSTANCE_OF_FLOAT", false),
        peg$c67 = function(v) { return {type:'INSTANCE_OF_FLOAT',value:parseValueInput(v)} },
        peg$c68 = "INSTANCE_OF_BOOL",
        peg$c69 = peg$literalExpectation("INSTANCE_OF_BOOL", false),
        peg$c70 = function(v) { return {type:'INSTANCE_OF_BOOL',value:parseValueInput(v)} },
        peg$c71 = "INSTANCE_OF_CHAR_SIMPLE",
        peg$c72 = peg$literalExpectation("INSTANCE_OF_CHAR_SIMPLE", false),
        peg$c73 = function(v) { return {type:'INSTANCE_OF_CHAR_SIMPLE',value:parseValueInput(v)} },
        peg$c74 = "INSTANCE_OF_CHAR_MULTPLE",
        peg$c75 = peg$literalExpectation("INSTANCE_OF_CHAR_MULTPLE", false),
        peg$c76 = function(v) { return {type:'INSTANCE_OF_CHAR_MULTPLE',value:parseValueInput(v)} },
        peg$c77 = "TYPE_INT",
        peg$c78 = peg$literalExpectation("TYPE_INT", false),
        peg$c79 = function() { return {type:'TYPE_INT'} },
        peg$c80 = "TYPE_BOOL",
        peg$c81 = peg$literalExpectation("TYPE_BOOL", false),
        peg$c82 = function() { return {type:'TYPE_BOOL'} },
        peg$c83 = "TYPE_FLOAT",
        peg$c84 = peg$literalExpectation("TYPE_FLOAT", false),
        peg$c85 = function() { return {type:'TYPE_FLOAT'} },
        peg$c86 = "TYPE_CHAR",
        peg$c87 = peg$literalExpectation("TYPE_CHAR", false),
        peg$c88 = function() { return {type:'TYPE_CHAR'} },
        peg$c89 = "TYPE_VOID",
        peg$c90 = peg$literalExpectation("TYPE_VOID", false),
        peg$c91 = function() { return {type:'TYPE_VOID'} },
        peg$c92 = "COMMAND_IF",
        peg$c93 = peg$literalExpectation("COMMAND_IF", false),
        peg$c94 = function() { return {type:'COMMAND_IF'} },
        peg$c95 = "COMMAND_FOR",
        peg$c96 = peg$literalExpectation("COMMAND_FOR", false),
        peg$c97 = function() { return {type:'COMMAND_FOR'} },
        peg$c98 = "COMMAND_WHILE",
        peg$c99 = peg$literalExpectation("COMMAND_WHILE", false),
        peg$c100 = function() { return {type:'COMMAND_WHILE'} },
        peg$c101 = "COMMAND_DO",
        peg$c102 = peg$literalExpectation("COMMAND_DO", false),
        peg$c103 = function() { return {type:'COMMAND_DO'} },
        peg$c104 = "COMMAND_BREAK",
        peg$c105 = peg$literalExpectation("COMMAND_BREAK", false),
        peg$c106 = function() { return {type:'COMMAND_BREAK'} },
        peg$c107 = "COMMAND_CONTINUE",
        peg$c108 = peg$literalExpectation("COMMAND_CONTINUE", false),
        peg$c109 = function() { return {type:'COMMAND_CONTINUE'} },
        peg$c110 = "COMMAND_SCANF",
        peg$c111 = peg$literalExpectation("COMMAND_SCANF", false),
        peg$c112 = function() { return {type:'COMMAND_SCANF'} },
        peg$c113 = "COMMAND_PRINTF",
        peg$c114 = peg$literalExpectation("COMMAND_PRINTF", false),
        peg$c115 = function() { return {type:'COMMAND_PRINTF'} },
        peg$c116 = "COMMAND_INCLUDE",
        peg$c117 = peg$literalExpectation("COMMAND_INCLUDE", false),
        peg$c118 = function() { return {type:'COMMAND_INCLUDE'} },
        peg$c119 = "COMMAND_RETURN",
        peg$c120 = peg$literalExpectation("COMMAND_RETURN", false),
        peg$c121 = function() { return {type:'COMMAND_RETURN'} },
        peg$c122 = "COMMAND_ELSE",
        peg$c123 = peg$literalExpectation("COMMAND_ELSE", false),
        peg$c124 = function() { return {type:'COMMAND_ELSE'} },
        peg$c125 = "IDENTIFIER_MAIN",
        peg$c126 = peg$literalExpectation("IDENTIFIER_MAIN", false),
        peg$c127 = function() { return {type:'IDENTIFIER_MAIN' }},
        peg$c128 = "IDENTIFIER_VARIABLES",
        peg$c129 = peg$literalExpectation("IDENTIFIER_VARIABLES", false),
        peg$c130 = function(v) { return {type:'IDENTIFIER_VARIABLES',value:parseValueInput(v)} },
        peg$c131 = "IDENTIFIER_POINTER_VARIABLE",
        peg$c132 = peg$literalExpectation("IDENTIFIER_POINTER_VARIABLE", false),
        peg$c133 = function(v) { return {type:'IDENTIFIER_POINTER_VARIABLE',value:parseValueInput(v)} },
        peg$c134 = "IDENTIFIER_POINTER_ADDRESS",
        peg$c135 = peg$literalExpectation("IDENTIFIER_POINTER_ADDRESS", false),
        peg$c136 = function(v) { return {type:'IDENTIFIER_POINTER_ADDRESS',value:parseValueInput(v)} },
        peg$c137 = "OPERATOR_ARITHMETIC_PLUS",
        peg$c138 = peg$literalExpectation("OPERATOR_ARITHMETIC_PLUS", false),
        peg$c139 = function() { return {type:"OPERATOR_ARITHMETIC_PLUS"} },
        peg$c140 = "OPERATOR_ARITHMETIC_LESS",
        peg$c141 = peg$literalExpectation("OPERATOR_ARITHMETIC_LESS", false),
        peg$c142 = function() { return {type:"OPERATOR_ARITHMETIC_LESS"} },
        peg$c143 = "OPERATOR_ARITHMETIC_MULTIPLICATION",
        peg$c144 = peg$literalExpectation("OPERATOR_ARITHMETIC_MULTIPLICATION", false),
        peg$c145 = function() { return {type:"OPERATOR_ARITHMETIC_MULTIPLICATION"} },
        peg$c146 = "OPERATOR_ARITHMETIC_DIVISION",
        peg$c147 = peg$literalExpectation("OPERATOR_ARITHMETIC_DIVISION", false),
        peg$c148 = function() { return {type:"OPERATOR_ARITHMETIC_DIVISION"} },
        peg$c149 = "OPERATOR_ARITHMETIC_DIV",
        peg$c150 = peg$literalExpectation("OPERATOR_ARITHMETIC_DIV", false),
        peg$c151 = function() { return {type:"OPERATOR_ARITHMETIC_DIV"} },
        peg$c152 = "OPERATOR_ARITHMETIC_MOD",
        peg$c153 = peg$literalExpectation("OPERATOR_ARITHMETIC_MOD", false),
        peg$c154 = function() { return {type:"OPERATOR_ARITHMETIC_MOD"} },
        peg$c155 = "OPERATOR_COMPARISON_LESS_THEN",
        peg$c156 = peg$literalExpectation("OPERATOR_COMPARISON_LESS_THEN", false),
        peg$c157 = function() { return {type:"OPERATOR_COMPARISON_LESS_THEN"} },
        peg$c158 = "OPERATOR_COMPARISON_MORE_THEN",
        peg$c159 = peg$literalExpectation("OPERATOR_COMPARISON_MORE_THEN", false),
        peg$c160 = function() { return {type:"OPERATOR_COMPARISON_MORE_THEN"} },
        peg$c161 = "OPERATOR_COMPARISON_LESS_EQUAL",
        peg$c162 = peg$literalExpectation("OPERATOR_COMPARISON_LESS_EQUAL", false),
        peg$c163 = function() { return {type:"OPERATOR_COMPARISON_LESS_EQUAL"} },
        peg$c164 = "OPERATOR_COMPARISON_MORE_EQUAL",
        peg$c165 = peg$literalExpectation("OPERATOR_COMPARISON_MORE_EQUAL", false),
        peg$c166 = function() { return {type:"OPERATOR_COMPARISON_MORE_EQUAL"} },
        peg$c167 = "OPERATOR_COMPARISON_DIFFERENT",
        peg$c168 = peg$literalExpectation("OPERATOR_COMPARISON_DIFFERENT", false),
        peg$c169 = function() { return {type:"OPERATOR_COMPARISON_DIFFERENT"} },
        peg$c170 = "OPERATOR_COMPARISON_EQUAL",
        peg$c171 = peg$literalExpectation("OPERATOR_COMPARISON_EQUAL", false),
        peg$c172 = function() { return {type:"OPERATOR_COMPARISON_EQUAL"} },
        peg$c173 = "OPERATOR_ATRIBUTION_EQUAL",
        peg$c174 = peg$literalExpectation("OPERATOR_ATRIBUTION_EQUAL", false),
        peg$c175 = function() { return {type:"OPERATOR_ATRIBUTION_EQUAL"} },
        peg$c176 = "OPERATOR_NEGATION",
        peg$c177 = peg$literalExpectation("OPERATOR_NEGATION", false),
        peg$c178 = function() { return {type:"OPERATOR_NEGATION"} },
        peg$c179 = "OPERATOR_LOGICAL_AND",
        peg$c180 = peg$literalExpectation("OPERATOR_LOGICAL_AND", false),
        peg$c181 = function() { return {type:"OPERATOR_LOGICAL_AND"} },
        peg$c182 = "OPERATOR_LOGICAL_OR",
        peg$c183 = peg$literalExpectation("OPERATOR_LOGICAL_OR", false),
        peg$c184 = function() { return {type:"OPERATOR_LOGICAL_OR"} },
        peg$c185 = "OPERATOR_UNARY_PIPE",
        peg$c186 = peg$literalExpectation("OPERATOR_UNARY_PIPE", false),
        peg$c187 = function() { return {type:"OPERATOR_UNARY_PIPE"} },
        peg$c188 = "OPERATOR_UNARY_E",
        peg$c189 = peg$literalExpectation("OPERATOR_UNARY_E", false),
        peg$c190 = function() { return {type:"OPERATOR_UNARY_E"} },
        peg$c191 = "DELIMITER_BLOCK_LEFT_BRACKET",
        peg$c192 = peg$literalExpectation("DELIMITER_BLOCK_LEFT_BRACKET", false),
        peg$c193 = function() { return {type:"DELIMITER_BLOCK_LEFT_BRACKET"} },
        peg$c194 = "DELIMITER_BLOCK_LEFT_BRACE",
        peg$c195 = peg$literalExpectation("DELIMITER_BLOCK_LEFT_BRACE", false),
        peg$c196 = function() { return {type:"DELIMITER_BLOCK_LEFT_BRACE"} },
        peg$c197 = "DELIMITER_BLOCK_LEFT_PARENTHESES",
        peg$c198 = peg$literalExpectation("DELIMITER_BLOCK_LEFT_PARENTHESES", false),
        peg$c199 = function() { return {type:"DELIMITER_BLOCK_LEFT_PARENTHESES"} },
        peg$c200 = "DELIMITER_BLOCK_RIGHT_BRACKET",
        peg$c201 = peg$literalExpectation("DELIMITER_BLOCK_RIGHT_BRACKET", false),
        peg$c202 = function() { return {type:"DELIMITER_BLOCK_RIGHT_BRACKET"} },
        peg$c203 = "DELIMITER_BLOCK_RIGHT_BRACE",
        peg$c204 = peg$literalExpectation("DELIMITER_BLOCK_RIGHT_BRACE", false),
        peg$c205 = function() { return {type:"DELIMITER_BLOCK_RIGHT_BRACE"} },
        peg$c206 = "DELIMITER_BLOCK_RIGHT_PARENTHESES",
        peg$c207 = peg$literalExpectation("DELIMITER_BLOCK_RIGHT_PARENTHESES", false),
        peg$c208 = function() { return {type:"DELIMITER_BLOCK_RIGHT_PARENTHESES"} },
        peg$c209 = "DELIMITER_END_LINE",
        peg$c210 = peg$literalExpectation("DELIMITER_END_LINE", false),
        peg$c211 = function() { return {type:"DELIMITER_END_LINE"} },
        peg$c212 = "DELIMITER_HASHTAG",
        peg$c213 = peg$literalExpectation("DELIMITER_HASHTAG", false),
        peg$c214 = function() { return {type:"DELIMITER_HASHTAG"} },
        peg$c215 = "DELIMITER_COMMA",
        peg$c216 = peg$literalExpectation("DELIMITER_COMMA", false),
        peg$c217 = function() { return {type:"DELIMITER_COMMA"} },
        peg$c218 = "DELIMITER_DOT",
        peg$c219 = peg$literalExpectation("DELIMITER_DOT", false),
        peg$c220 = function() { return {type:"DELIMITER_DOT"} },
        peg$c221 = "DELIMITER_DOT_COMMA",
        peg$c222 = peg$literalExpectation("DELIMITER_DOT_COMMA", false),
        peg$c223 = function() { return {type:"DELIMITER_DOT_COMMA"} },
        peg$c224 = "COMMENT_SIMPLE",
        peg$c225 = peg$literalExpectation("COMMENT_SIMPLE", false),
        peg$c226 = "COMMENT_MULTIPLE",
        peg$c227 = peg$literalExpectation("COMMENT_MULTIPLE", false),
        peg$c228 = "INCLUDE_CONTENT",
        peg$c229 = peg$literalExpectation("INCLUDE_CONTENT", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsePrograminit() {
      var s0;

      s0 = peg$parseInitialRule();

      return s0;
    }

    function peg$parseInitialRule() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseType();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIDENTIFIER_MAIN();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseDELIMITER_BLOCK_LEFT_BRACE();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDELIMITER_BLOCK_RIGHT_BRACE();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER_MAIN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDELIMITER_BLOCK_LEFT_BRACE();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseProgram();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseDELIMITER_BLOCK_RIGHT_BRACE();
                    if (s8 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7, s8];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseIDENTIFIER_MAIN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDELIMITER_BLOCK_LEFT_BRACE();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseProgram();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseDELIMITER_BLOCK_RIGHT_BRACE();
                    if (s7 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseProgram() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseSourceElement();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseSourceElement();
      }

      return s0;
    }

    function peg$parseSourceElement() {
      var s0;

      s0 = peg$parseStatementSimple();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStatementBlock();
      }

      return s0;
    }

    function peg$parseStatementSimple() {
      var s0;

      s0 = peg$parseVariableStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseScanfStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePrintfStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseReturnStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseContinueStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBreakStatement();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseStatementBlock() {
      var s0;

      s0 = peg$parseIfStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseForStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseWhileStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDoWhileStatement();
          }
        }
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0;

      s0 = peg$parseVariableStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseExpressionStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIfStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseForStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseContinueStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBreakStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseReturnStatement();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_DOT_COMMA();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_RIGHT_BRACE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = void 0;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parsetest() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseIdentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDELIMITER_COMMA();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseIdentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDELIMITER_COMMA();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDELIMITER_DOT_COMMA();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseCodeComposer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_BRACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseProgram();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOS();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWhileStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_WHILE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpressionStatement();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCodeComposer();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDoWhileStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_DO();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCodeComposer();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMAND_WHILE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpressionStatement();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEOL();
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIfStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_IF();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpressionStatement();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCodeComposer();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCOMMAND_ELSE();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMAND_IF();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpressionStatement();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCodeComposer();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseCOMMAND_IF();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionStatement();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCodeComposer();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOMMAND_ELSE();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCodeComposer();
                if (s6 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseCOMMAND_IF();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpressionStatement();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCodeComposer();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseForStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_FOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseForExpressionTerm();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCodeComposer();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseForExpressionTerm() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseForFistTerm();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseForSecondTerm();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseForThirdTerm();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForFistTerm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableAtribuition();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDELIMITER_DOT_COMMA();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForSecondTerm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseComparisonOperators();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDELIMITER_DOT_COMMA();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseComparisonOperators();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseInstanceType();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDELIMITER_DOT_COMMA();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseForThirdTerm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariableAtribuition();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePrintfStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_PRINTF();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePrintfArgumentList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c16(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePrintfArgumentList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSTRINGS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSTRINGS();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDELIMITER_COMMA();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMultipleIdentifierWithComma();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseReturnStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_RETURN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseCOMMAND_RETURN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstanceType();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseBreakStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_BREAK();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseContinueStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_CONTINUE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEOL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c19(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseScanfStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCOMMAND_SCANF();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseScanfArgumentList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseScanfArgumentList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSTRINGS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDELIMITER_COMMA();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSTRINGS();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDELIMITER_COMMA();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMultipleIdentifierWithComma();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseVariableStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseType();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariableStatementList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseVariableStatementList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOL();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseType();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIdentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseVariableDaclarationList();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEOL();
                if (s5 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseVariableDaclarationList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpressionStatement();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVariableStatementList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseVariableStatementTypes();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseVariableStatementTypes();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseVariableStatementArray();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseVariableAtribuition();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseVariableStatementTypes();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseVariableStatementTypes();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseVariableStatementArray();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseVariableStatementArray();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseVariableStatementTypes();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseVariableStatementTypes();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseIdentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseVariableAtribuition();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseVariableStatementTypes();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseVariableStatementTypes();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseVariableStatementLast() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariableStatementArray();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableAtribuition();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseVariableStatementArray();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseVariableStatementArray();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseIdentifier();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseVariableAtribuition();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseIdentifier();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseVariableDaclarationList();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseIdentifier();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseVariableStatementTypes() {
      var s0;

      s0 = peg$parseVariableStatementAtribuition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVariableStatementSimple();
      }

      return s0;
    }

    function peg$parseVariableStatementAtribuition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVariableStatementArray();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseInstanceType();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELIMITER_COMMA();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableAtribuition();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDELIMITER_COMMA();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseInstanceType();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDELIMITER_COMMA();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVariableStatementArray();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseVariableStatementArray();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDELIMITER_COMMA();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseVariableStatementSimple() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELIMITER_COMMA();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableStatementArray();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDELIMITER_COMMA();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseVariableStatementArray() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDELIMITER_BLOCK_LEFT_BRACKET();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINSTANCE_OF_INT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDELIMITER_BLOCK_RIGHT_BRACKET();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVariableAtribuition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariableAtribuitionTypes();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPERATOR_UNARY_E();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVariableAtribuitionTypes();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseVariableAtribuitionTypes() {
      var s0;

      s0 = peg$parseExpressionStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssignmentExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEquation();
          if (s0 === peg$FAILED) {
            s0 = peg$parseInstanceType();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIdentifier();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEquation() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseTerm();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseMoreOrLess();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseTerm();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseMoreOrLess();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTerm();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTerm() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFactor();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseSomeOperators();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseFactor();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseSomeOperators();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFactor();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFactor() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEquation();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumeric();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseIdentifier();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c31(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseMoreOrLess() {
      var s0;

      s0 = peg$parseOPERATOR_ARITHMETIC_PLUS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOPERATOR_ARITHMETIC_LESS();
      }

      return s0;
    }

    function peg$parseSomeOperators() {
      var s0;

      s0 = peg$parseOPERATOR_ARITHMETIC_MULTIPLICATION();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOPERATOR_ARITHMETIC_DIVISION();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOPERATOR_ARITHMETIC_MOD();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOPERATOR_ARITHMETIC_DIV();
          }
        }
      }

      return s0;
    }

    function peg$parseArithmeticOperators() {
      var s0;

      s0 = peg$parseOPERATOR_ARITHMETIC_PLUS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOPERATOR_ARITHMETIC_LESS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOPERATOR_ARITHMETIC_MULTIPLICATION();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOPERATOR_ARITHMETIC_DIVISION();
            if (s0 === peg$FAILED) {
              s0 = peg$parseOPERATOR_ARITHMETIC_MOD();
              if (s0 === peg$FAILED) {
                s0 = peg$parseOPERATOR_ARITHMETIC_DIV();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNumeric() {
      var s0;

      s0 = peg$parseINSTANCE_OF_INT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINSTANCE_OF_FLOAT();
      }

      return s0;
    }

    function peg$parseExpressionEquationStatement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseArithmeticOperators();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEquation();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpressionStatement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseExpressionUnit();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLogicalOperators();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseExpressionUnit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseLogicalOperators();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpressionUnit();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseExpressionEquationStatement();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseExpressionEquationStatement();
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c33(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseExpressionUnit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalOperators();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseExpressionUnit();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalOperators();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionUnit();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseLogicalOperators() {
      var s0;

      s0 = peg$parseOPERATOR_LOGICAL_AND();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOPERATOR_LOGICAL_OR();
      }

      return s0;
    }

    function peg$parseExpressionUnit() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAssignmentExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c34(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAssignmentExpression();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOPERATOR_NEGATION();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseAssignmentExpression();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES();
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPERATOR_NEGATION();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseAssignmentExpression();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c34(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAssignmentExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseComparisonOperators();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c35(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComparisonOperators();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInstanceType();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseInstanceType();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseComparisonOperators();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseInstanceType();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLogicalOperators();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIdentifier();
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c35(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseLogicalOperators();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseInstanceType();
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = peg$parseInstanceType();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseLogicalOperators();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseInstanceType();
                    if (s4 !== peg$FAILED) {
                      s2 = [s2, s3, s4];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c35(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$currPos;
                  s2 = peg$parseInstanceType();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseVariableAtribuition();
                    if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c35(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    s2 = peg$parseIdentifier();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseVariableAtribuition();
                      if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c35(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseIdentifier();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c35(s1);
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseComparisonOperators() {
      var s0, s1, s2;

      s0 = peg$parseOPERATOR_COMPARISON_EQUAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOPERATOR_COMPARISON_DIFFERENT();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOPERATOR_COMPARISON_LESS_EQUAL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOPERATOR_COMPARISON_LESS_THEN();
            if (s0 === peg$FAILED) {
              s0 = peg$parseOPERATOR_COMPARISON_MORE_EQUAL();
              if (s0 === peg$FAILED) {
                s0 = peg$parseOPERATOR_COMPARISON_MORE_THEN();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseOPERATOR_NEGATION();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPERATOR_ATRIBUTION_EQUAL();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseLogicalOperators();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMultipleIdentifierWithComma() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseDELIMITER_COMMA();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDELIMITER_COMMA();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSTRINGS() {
      var s0;

      s0 = peg$parseINSTANCE_OF_CHAR_MULTPLE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINSTANCE_OF_CHAR_SIMPLE();
      }

      return s0;
    }

    function peg$parseType() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseTYPE_INT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTYPE_BOOL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTYPE_FLOAT();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTYPE_CHAR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTYPE_VOID();
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }

      return s0;
    }

    function peg$parseInstanceType() {
      var s0;

      s0 = peg$parseINSTANCE_OF_BOOL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINSTANCE_OF_CHAR_MULTPLE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINSTANCE_OF_CHAR_SIMPLE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseINSTANCE_OF_FLOAT();
            if (s0 === peg$FAILED) {
              s0 = peg$parseINSTANCE_OF_INT();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIDENTIFIER_VARIABLES();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c37(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIDENTIFIER_POINTER_ADDRESS();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c38(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          s3 = peg$parseOPERATOR_UNARY_E();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseOPERATOR_UNARY_E();
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseOPERATOR_ARITHMETIC_MULTIPLICATION();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseOPERATOR_ARITHMETIC_MULTIPLICATION();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIDENTIFIER_POINTER_VARIABLE();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c43(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c45.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c45.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }

      return s0;
    }

    function peg$parse_LB() {
      var s0, s1;

      s0 = peg$parse_();
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$parseLineBreak();
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseLineBreak();
        }
      }

      return s0;
    }

    function peg$parseLineBreak() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c47;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseValueInput() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c49;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseValue();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseValue();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (input.charCodeAt(peg$currPos) === 34) {
              s6 = peg$c51;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c52); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c51;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s6 = peg$c53;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLine();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 124) {
                    s8 = peg$c53;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c54); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseColumn();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s10 = peg$c55;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                      }
                      if (s10 !== peg$FAILED) {
                        s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValue() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c51;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parseLine() {
      var s0, s1;

      s0 = [];
      if (peg$c60.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
      }

      return s0;
    }

    function peg$parseColumn() {
      var s0, s1;

      s0 = [];
      if (peg$c60.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
      }

      return s0;
    }

    function peg$parseINSTANCE_OF_INT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c64(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINSTANCE_OF_FLOAT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c65) {
        s1 = peg$c65;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c67(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINSTANCE_OF_BOOL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINSTANCE_OF_CHAR_SIMPLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 23) === peg$c71) {
        s1 = peg$c71;
        peg$currPos += 23;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseINSTANCE_OF_CHAR_MULTPLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 24) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 24;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c76(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTYPE_INT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTYPE_BOOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTYPE_FLOAT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c85();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTYPE_CHAR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTYPE_VOID() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_IF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_FOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c97();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_WHILE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c98) {
        s1 = peg$c98;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_DO() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c101) {
        s1 = peg$c101;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c103();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_BREAK() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c104) {
        s1 = peg$c104;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c106();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_CONTINUE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c107) {
        s1 = peg$c107;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c109();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_SCANF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c112();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_PRINTF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c115();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_INCLUDE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_RETURN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c121();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMAND_ELSE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c124();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIDENTIFIER_MAIN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c125) {
        s1 = peg$c125;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c127();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIDENTIFIER_VARIABLES() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c130(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIDENTIFIER_POINTER_VARIABLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 27) === peg$c131) {
        s1 = peg$c131;
        peg$currPos += 27;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIDENTIFIER_POINTER_ADDRESS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 26) === peg$c134) {
        s1 = peg$c134;
        peg$currPos += 26;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValueInput();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c136(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_PLUS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 24) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 24;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_LESS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 24) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 24;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c142();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_MULTIPLICATION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 34) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 34;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c145();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_DIVISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 28) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 28;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c148();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_DIV() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 23) === peg$c149) {
        s1 = peg$c149;
        peg$currPos += 23;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c151();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ARITHMETIC_MOD() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 23) === peg$c152) {
        s1 = peg$c152;
        peg$currPos += 23;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c154();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_LESS_THEN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c155) {
        s1 = peg$c155;
        peg$currPos += 29;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c157();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_MORE_THEN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 29;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c160();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_LESS_EQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 30) === peg$c161) {
        s1 = peg$c161;
        peg$currPos += 30;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c163();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_MORE_EQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 30) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 30;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c166();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_DIFFERENT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c167) {
        s1 = peg$c167;
        peg$currPos += 29;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c169();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_COMPARISON_EQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 25) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 25;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c172();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_ATRIBUTION_EQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 25) === peg$c173) {
        s1 = peg$c173;
        peg$currPos += 25;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c175();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_NEGATION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c178();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_LOGICAL_AND() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c179) {
        s1 = peg$c179;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_LOGICAL_OR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c184();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_UNARY_PIPE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOPERATOR_UNARY_E() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c190();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_LEFT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 28) === peg$c191) {
        s1 = peg$c191;
        peg$currPos += 28;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c193();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_LEFT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 26) === peg$c194) {
        s1 = peg$c194;
        peg$currPos += 26;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c195); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c196();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_LEFT_PARENTHESES() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 32) === peg$c197) {
        s1 = peg$c197;
        peg$currPos += 32;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c199();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_RIGHT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 29;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c202();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_RIGHT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 27) === peg$c203) {
        s1 = peg$c203;
        peg$currPos += 27;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c205();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_BLOCK_RIGHT_PARENTHESES() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 33) === peg$c206) {
        s1 = peg$c206;
        peg$currPos += 33;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c208();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_END_LINE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c209) {
        s1 = peg$c209;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c211();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_HASHTAG() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c212) {
        s1 = peg$c212;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c214();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_COMMA() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c215) {
        s1 = peg$c215;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c217();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_DOT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c220();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDELIMITER_DOT_COMMA() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c221) {
        s1 = peg$c221;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c223();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMENT_SIMPLE() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c224) {
        s0 = peg$c224;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }

      return s0;
    }

    function peg$parseCOMMENT_MULTIPLE() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c226) {
        s0 = peg$c226;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      return s0;
    }

    function peg$parseINCLUDE_CONTENT() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c228) {
        s0 = peg$c228;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      return s0;
    }


      var TYPES_TO_PROPERTY_NAMES = {
        CallExpression:   "callee",
        MemberExpression: "object",
      };

      function filledArray(count, value) {
        return Array.apply(null, new Array(count))
          .map(function() { return value; });
      }

      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        return list.map(function(element) { return element[index]; });
      }

      function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index));
      }

      function buildBinaryExpression(head, tail) {
        return tail.reduce(function(result, element) {
          return {
            type: "BinaryExpression",
            operator: element[1],
            left: result,
            right: element[3]
          };
        }, head);
      }

      function buildLogicalExpression(head, tail) {
        return tail.reduce(function(result, element) {
          return {
            type: "LogicalExpression",
            operator: element[1],
            left: result,
            right: element[3]
          };
        }, head);
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }

    	function clearArray(arrInput){
     		let arrOutput = [];
            
            for(let a of arrInput){
            
            	if(a instanceof Array){
                	if(a.lenght > 0){
                    	arrOutput.push(a);
                    }
                }else{
                	arrOutput.push(a);
                } 
            }
            return arrInput;
        }
        
        function parseValueInput(str){
        	
            
            return {value:str[0],line:str[1],column:str[2]}
            
        }

    function clearArr(arrInput){
     		let arrOutput = [];
            for(let a of arrInput){
            	
            	if(a instanceof Array){
               		if(a.lenght > 0){
                    	arrOutput.push(a);
                    }
                }
                if(a instanceof Object){
                	arrOutput.push(a);
                }
               
            }
            return arrOutput;
        }

    function serialize(arr){
    	let arrOutput = [];
        if (arr instanceof Array){
        for(let i of arr){
        	if(i instanceof Array){
            	if(i.length > 0){
                	i = serialize(i);
                	arrOutput.push(i);
                }
            }else{
            	arrOutput.push(i);
            }
        }
        }else{
        	return arr;
        }

        return arrOutput;
    	
    }


    function makeLinearize(arr){
        let outArr = [];
        linearize(arr,outArr);
        if(outArr.length == 1){
        	return outArr[0];
        }
        return outArr;
    }

    function linearize(arr,outArr) {
        if (arr instanceof Array) {
            if (arr.length > 0) {
                for (let i of arr) {
                    linearize(i,outArr);
                }
            }
        }else{
            outArr.push(arr);
        }

    }






    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
