Program_init "Program_init"
  = Program

Program "Program"
  = SourceElements ?

SourceElements "SourceElements"
  = SourceElement(EOS SourceElement) *

SourceElement  "SourceElement"
  = DELIMITER_BLOCK_LEFT_BRACE Statement

EOS "EOS"
  = DELIMITER_DOT_COMMA
  / DELIMITER_BLOCK_RIGHT_BRACE

EOF "EOF"
  = !.



Statement "Statement"
  = VariableStatement
  / ExpressionStatement
  / IfStatement
  / IterationStatement
  / ContinueStatement
  / BreakStatement
  / ReturnStatement


// DEFINITION OF DECLARATION OF VARIABLES

VariableStatement "VariableStatements"
  = Type VariableStatementList

VariableStatementList "VariableStatementMultiples"
  = VariableStatementAtribuition * VariableStatementSimple * Identifier OPERATOR_ATRIBUTION_EQUAL InstanceType
    / VariableStatementAtribuition * VariableStatementSimple * Identifier

VariableStatementAtribuition "VariableStatementAtribuition"
  = (Identifier OPERATOR_ATRIBUTION_EQUAL InstanceType DELIMITER_COMMA)

VariableStatementSimple "VariableStatementSimple"
  = (Identifier DELIMITER_COMMA)

// *************************************

// DEFINITION OF EXPRESSIONS

ExpressionStatement "ExpressionStatement" 
  =(ExpressionUnit LogicalOperators)* ExpressionUnit

LogicalOperators
  = OPERATOR_LOGICAL_AND
  / OPERATOR_LOGICAL_OR

ExpressionUnit "ExpressionUnit"
  = DELIMITER_BLOCK_LEFT_PARENTHESES AssignmentExpression DELIMITER_BLOCK_RIGHT_PARENTHESES

AssignmentExpression "AssignmentExpression"
  = IDENTIFIER_VARIABLES ComparisonOperators IDENTIFIER_VARIABLES
  / IDENTIFIER_VARIABLES ComparisonOperators InstanceType
  / InstanceType ComparisonOperators InstanceType


ComparisonOperators
  = OPERATOR_COMPARISON_EQUAL
  / OPERATOR_COMPARISON_DIFFERENT
  / OPERATOR_COMPARISON_LESS_EQUAL
  / OPERATOR_COMPARISON_LESS_THEN
  / OPERATOR_COMPARISON_MORE_EQUAL
  / OPERATOR_COMPARISON_MORE_THEN

// *****************************************


IfStatement "IfStatement"
  = COMMAND_IF ExpressionStatement 
    / COMMAND_IF ExpressionStatement Statement COMMAND_ELSE ExpressionStatement




test "test"
  = Type(Identifier DELIMITER_COMMA) * Identifier DELIMITER_DOT_COMMA

InitialRule "InitialRule"
  = Type IDENTIFIER_MAIN DELIMITER_BLOCK_LEFT_PARENTHESES DELIMITER_BLOCK_RIGHT_PARENTHESES CodeComposer

Type "Type"
  = TYPE_INT
  / TYPE_BOOL
  / TYPE_FLOAT
  / TYPE_CHAR
  / TYPE_VOID

InstanceType "InstanceType"
  = INSTANCE_OF_BOOL
  / INSTANCE_OF_CHAR_MULTPLE
  / INSTANCE_OF_CHAR_SIMPLE
  / INSTANCE_OF_FLOAT
  / INSTANCE_OF_INT

Identifier "Identifier"
  = IDENTIFIER_POINTER_ADDRESS
  / IDENTIFIER_POINTER_VARIABLE
  / IDENTIFIER_VARIABLES

ArgumentsList "ArgumentsList"
  = 'ARGS'

CodeComposer "CodeComposer"
  = DELIMITER_BLOCK_LEFT_BRACE Statement DELIMITER_BLOCK_RIGHT_BRACE



ReturnStatement "ReturnStatement"
  = ''
ContinueStatement "ContinueStatement"
  = ''
IterationStatement "IterationStatement"
  = ''
BreakStatement "BreakStatement"
  = ''






_ "Optional Whitespace"
  = w: [\t\n\r] * { return[w.join('')] }

__ "Mandatory Whitespace" = [\t\r\n] +


  _LB = _
    / LineBreak *

    LineBreak 
	= '\n'




INSTANCE_OF_INT = 'INSTANCE_OF_INT'
INSTANCE_OF_FLOAT = 'INSTANCE_OF_FLOAT'
INSTANCE_OF_BOOL = 'INSTANCE_OF_BOOL'
INSTANCE_OF_CHAR_SIMPLE = 'INSTANCE_OF_CHAR_SIMPLE'
INSTANCE_OF_CHAR_MULTPLE = 'INSTANCE_OF_CHAR_MULTPLE'

TYPE_INT = (_'TYPE_INT'_)*
  TYPE_BOOL = 'TYPE_BOOL'
TYPE_FLOAT = 'TYPE_FLOAT'
TYPE_CHAR = 'TYPE_CHAR'
TYPE_VOID = 'TYPE_VOID'

COMMAND_IF = 'COMMAND_IF'
COMMAND_FOR = 'COMMAND_FOR'
COMMAND_WHILE = 'COMMAND_WHILE'
COMMAND_DO = 'COMMAND_DO'
COMMAND_BREAK = 'COMMAND_BREAK'
COMMAND_CONTINUE = 'COMMAND_CONTINUE'
COMMAND_SCANF = 'COMMAND_SCANF'
COMMAND_PRINT = 'COMMAND_PRINT'
COMMAND_INCLUDE = 'COMMAND_INCLUDE'
COMMAND_RETURN = 'COMMAND_RETURN'
COMMAND_ELSE = 'COMMAND_ELSE'

IDENTIFIER_MAIN = 'IDENTIFIER_MAIN'
IDENTIFIER_VARIABLES = 'IDENTIFIER_VARIABLES'
IDENTIFIER_POINTER_VARIABLE = 'IDENTIFIER_POINTER_VARIABLE'
IDENTIFIER_POINTER_ADDRESS = 'IDENTIFIER_POINTER_ADDRESS'

OPERATOR_ARITHMETIC_PLUS = 'OPERATOR_ARITHMETIC_PLUS'
OPERATOR_ARITHMETIC_LESS = 'OPERATOR_ARITHMETIC_LESS'
OPERATOR_ARITHMETIC_MULTIPLICATION = 'OPERATOR_ARITHMETIC_MULTIPLICATION'
OPERATOR_ARITHMETIC_DIVISION = 'OPERATOR_ARITHMETIC_DIVISION'
OPERATOR_ARITHMETIC_DIV = 'OPERATOR_ARITHMETIC_DIV'
OPERATOR_ARITHMETIC_MOD = 'OPERATOR_ARITHMETIC_MOD'
OPERATOR_COMPARISON_LESS_THEN = 'OPERATOR_COMPARISON_LESS_THEN'
OPERATOR_COMPARISON_MORE_THEN = 'OPERATOR_COMPARISON_MORE_THEN'
OPERATOR_COMPARISON_LESS_EQUAL = 'OPERATOR_COMPARISON_LESS_EQUAL'
OPERATOR_COMPARISON_MORE_EQUAL = 'OPERATOR_COMPARISON_MORE_EQUAL'
OPERATOR_COMPARISON_DIFFERENT = 'OPERATOR_COMPARISON_DIFFERENT'
OPERATOR_COMPARISON_EQUAL = 'OPERATOR_COMPARISON_EQUAL'
OPERATOR_ATRIBUTION_EQUAL = 'OPERATOR_ATRIBUTION_EQUAL'
OPERATOR_NEGATION = 'OPERATOR_NEGATION'
OPERATOR_LOGICAL_AND = 'OPERATOR_LOGICAL_AND'
OPERATOR_LOGICAL_OR = 'OPERATOR_LOGICAL_OR'
OPERATOR_UNARY_PIPE = 'OPERATOR_UNARY_PIPE'
OPERATOR_UNARY_E = 'OPERATOR_UNARY_E'

DELIMITER_BLOCK_LEFT_BRACKET = 'DELIMITER_BLOCK_LEFT_BRACKET'
DELIMITER_BLOCK_LEFT_BRACE = 'DELIMITER_BLOCK_LEFT_BRACE'
DELIMITER_BLOCK_LEFT_PARENTHESES = 'DELIMITER_BLOCK_LEFT_PARENTHESES'
DELIMITER_BLOCK_RIGHT_BRACKET = 'DELIMITER_BLOCK_RIGHT_BRACKET'
DELIMITER_BLOCK_RIGHT_BRACE = 'DELIMITER_BLOCK_RIGHT_BRACE'
DELIMITER_BLOCK_RIGHT_PARENTHESES = 'DELIMITER_BLOCK_RIGHT_PARENTHESES'
DELIMITER_END_LINE = 'DELIMITER_END_LINE'
DELIMITER_HASHTAG = 'DELIMITER_HASHTAG'
DELIMITER_COMMA = 'DELIMITER_COMMA'
DELIMITER_DOT = 'DELIMITER_DOT'
DELIMITER_DOT_COMMA = 'DELIMITER_DOT_COMMA'

COMMENT_SIMPLE = 'COMMENT_SIMPLE'
COMMENT_MULTIPLE = 'COMMENT_MULTIPLE'

INCLUDE_CONTENT = 'INCLUDE_CONTENT'